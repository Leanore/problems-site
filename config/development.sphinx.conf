indexer
{
}

searchd
{
  listen = 127.0.0.1:9312
  log = /home/elena/projects/curspr/log/searchd.log
  query_log = /home/elena/projects/curspr/log/searchd.query.log
  pid_file = /home/elena/projects/curspr/log/searchd.development.pid
}

source problem_core_0
{
  type = mysql
  sql_host = localhost
  sql_user = root
  sql_pass = 
  sql_db = cProject_development
  sql_sock = /var/run/mysqld/mysqld.sock
  sql_query_pre = SET NAMES utf8
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query = SELECT SQL_NO_CACHE `problems`.`id` * CAST(1 AS SIGNED) + 0 AS `id` , `problems`.`description` AS `description`, `problems`.`title` AS `title`, `problems`.`posted_date` AS `posted_date`, GROUP_CONCAT(DISTINCT IFNULL(`tags`.`name`, '0') SEPARATOR ' ') AS `tags`, CONCAT_WS(' ', `users`.`login`, `profiles`.`fullname`) AS `user_name`, `problems`.`id` AS `sphinx_internal_id`, 0 AS `sphinx_deleted`, 408614228 AS `class_crc`, IFNULL('Problem', '') AS `sphinx_internal_class`, IFNULL(`problems`.`posted_date`, '') AS `posted_date_sort` FROM `problems` LEFT OUTER JOIN `taggings` ON `taggings`.`taggable_id` = `problems`.`id` AND `taggings`.`taggable_type` = 'Problem' LEFT OUTER JOIN `tags` ON `tags`.`id` = `taggings`.`tag_id` LEFT OUTER JOIN `users` ON `users`.`id` = `problems`.`user_id` LEFT OUTER JOIN `profiles` ON `profiles`.`user_id` = `users`.`id` WHERE (`problems`.`id` >= $start AND `problems`.`id` <= $end) GROUP BY `problems`.`id` ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`id`), 1), IFNULL(MAX(`id`), 1) FROM `problems` 
  sql_range_step = 10000000
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_uint = class_crc
  sql_attr_string = sphinx_internal_class
  sql_attr_string = posted_date_sort
  sql_query_info = SELECT * FROM `problems` WHERE `id` = (($id - 0) / 1)
}

index problem_core
{
  path = /home/elena/projects/curspr/db/sphinx/development/problem_core
  morphology = stem_en
  charset_type = utf-8
  min_infix_len = 3
  enable_star = 1
  html_strip = 1
  source = problem_core_0
}

index problem
{
  type = distributed
  local = problem_core
}
